select * from dba_datapump_jobs;
select * from dba_datapump_sessions;

--Completed (120,803 so far)
-------------------------
select * 
from   ZK1Q4ID.MDX_IMPORT
where  processing_state = 'W' and processing_status = 'C';


--What Object types are Left..
------------------------------
select unique object_path_seqno, object_type
from   ZK1Q4ID.MDX_IMPORT
where  process_order > 0 AND processing_state = 'R' and processing_status = 'C'
ORDER BY object_path_seqno;

--What Objects are Left  (Total: 120,237, Current: 6,072)...
----------------------------------------------------------
select process_order, object_type, object_schema, object_name
from   ZK1Q4ID.MDX_IMPORT
where  process_order > 0 AND processing_state = 'R' and processing_status = 'C'
and    object_path_seqno in  (14,16,20,25,31,34,37,39,48,56)
--and    object_schema like 'MDV%'
order by process_order;


--What schemas are left
----------------------------
select distinct object_schema
from   ZK1Q4ID.MDX_IMPORT
where  process_order > 0 AND processing_state = 'R' and processing_status = 'C'
and    object_path_seqno in  (14,16,20,25,31,34,37,39,48,56)
ORDER BY 1
;

select * from  database_export_objects;
select * from  schema_export_objects;
select * from  table_export_objects;

select j.owner_name, j.job_name, j.operation, j.job_mode, j.degree,
       m.sql_exec_start, m.SQL_ID,
       m.px_servers_allocated, 
       m.elapsed_time,
       m.sql_text
from   dba_datapump_jobs j
       inner join gv$sql_monitor m on j.owner_name = m.username and j.job_name = m.action
where  m.status = 'EXECUTING';

select * from gv$session_longops
where sofar <> totalwork; 

SELECT * 
FROM  GV$ACTIVE_SESSION_HISTORY
--where sql_id like '7r8t%'
;

--Errors....
--------------------
SELECT EXECID, 
       EXECSTEP, EXECSTEPDESC,
       EXECSTEPSTART, EXECSTEPEND,
       CASE WHEN EXECSTEPEND IS NOT NULL THEN EXECSTEPEND - EXECSTEPSTART ELSE NULL END DIFF,
       SQLTEXT, MESSAGE
FROM   MASK_LOG
WHERE  EXECID > 0
and   message like 'ORA%'
--and   execstepstart > timestamp '2017-01-25 00:00:00'
ORDER BY execid, EXECSTEPSTART, execstep 
;

--------------------------------------------
--Completed/Running Objects -1070, Running One's -> 9, 10, 13
--------------------------------------------
SELECT EXECID, EXECSTEPDESC, EXECSTEPSTART, EXECSTEPEND,
       CASE WHEN EXECSTEPEND IS NOT NULL THEN EXECSTEPEND - EXECSTEPSTART ELSE NULL END DIFF
FROM   MASK_LOG
WHERE  EXECID > 0
AND    EXECSTEP = 3
AND    MESSAGE IS NULL
ORDER BY EXECSTEPEND DESC NULLS FIRST
;

----------------------------------------------
--Remaining Objects -30
----------------------------------------------

SELECT DISTINCT OBJECT_OWNER , OBJECT_NAME 
FROM   dba_sec_relevant_cols
WHERE  ( OBJECT_OWNER LIKE 'MDXHUB%' 
         OR 
         OBJECT_OWNER LIKE 'MDV%' 
       )
;

------------------------------

SET SERVEROUTPUT ON SIZE UNLIMITED
DECLARE
  ind NUMBER;              -- Loop index
  h1 NUMBER;               -- Data Pump job handle
  percent_done NUMBER;     -- Percentage of job complete
  job_state VARCHAR2(30);  -- To keep track of job state
  js ku$_JobStatus;        -- The job status from get_status
  ws ku$_WorkerStatusList; -- Worker status
  sts ku$_Status;          -- The status object returned by get_status
BEGIN
h1 := DBMS_DATAPUMP.attach('MDX_IMPORT', 'ZK1Q4ID'); -- job name and owner
dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip, 0, job_state, sts);
js := sts.job_status;
ws := js.worker_status_list;

dbms_output.put_line('*** Job percent done = ' || to_char(js.percent_done));
dbms_output.put_line('restarts - '||js.restart_count);

ind := ws.first;
  while ind is not null loop
    dbms_output.put_line('rows completed for '|| ws(ind).object_type ||' - '||ws(ind).schema || '.' || ws(ind).name || ' is: '||  ws(ind).completed_rows);
    ind := ws.next(ind);
  end loop;
DBMS_DATAPUMP.detach(h1);
end;
/

--change parallelism ....
-------------------------
SET SERVEROUTPUT ON SIZE UNLIMITED
DECLARE
  ind NUMBER;              -- Loop index
  h1 NUMBER;               -- Data Pump job handle
BEGIN
h1 := DBMS_DATAPUMP.attach('MDX_IMPORT', 'ZK1Q4ID'); -- job name and owner
      dbms_datapump.set_parallel(h1,128);
      DBMS_DATAPUMP.detach(h1);
END;
/
