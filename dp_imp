SET SERVEROUTPUT ON SIZE UNLIMITED
DECLARE
  
  TYPE r_updt_sql IS RECORD
  (
    obj_ownr     VARCHAR2(35),
    obj_name     VARCHAR2(35),
    npi_updt_sql CLOB  
  );
  
  TYPE t_updtsql is table of r_updt_sql;
  
  ind           NUMBER        ;       -- Loop index
  h1            NUMBER        ;       -- Data Pump job handle
  percent_done  NUMBER        ;       -- Percentage of job complete
  job_state     VARCHAR2(30)  ;       -- To keep track of job state
  le            ku$_LogEntry  ;       -- For WIP and error messages
  js            ku$_JobStatus ;       -- The job status from get_status
  jd            ku$_JobDesc   ;       -- The job description from get_status
  sts           ku$_Status    ;       -- The status object returned by get_status
  tabList       t_updtsql     ;       -- List of NPI Tables that will be marked as NULLs.
  
  
BEGIN
  DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);
    
  BEGIN

      h1 := DBMS_DATAPUMP.OPEN('IMPORT','TABLE',NULL, 'MDX_IMPORT' );
          
      DBMS_DATAPUMP.ADD_FILE(handle => h1, filename => 'exp_dp_hub_1_%U.dmp', directory => 'MDPD_EXP1');
      DBMS_DATAPUMP.ADD_FILE(handle => h1, filename => 'exp_dp_hub_2_%U.dmp', directory => 'MDPD_EXP2');
      DBMS_DATAPUMP.ADD_FILE(handle => h1, filename => 'exp_dp_hub_3_%U.dmp', directory => 'MDPD_EXP3');
          
      dbms_output.put_line('Starting to Import');

      DBMS_DATAPUMP.SET_PARAMETER(handle => h1, name => 'TABLE_EXISTS_ACTION', value => 'REPLACE');
      DBMS_DATAPUMP.SET_PARALLEL (handle => h1, degree => 128);
      
      DBMS_DATAPUMP.METADATA_FILTER(h1,'EXCLUDE_PATH_EXPR', q'[ = 'STATISTICS']');
      DBMS_DATAPUMP.METADATA_FILTER(h1,'EXCLUDE_PATH_EXPR', q'[ = 'STATISTICS']');

      DBMS_DATAPUMP.START_JOB(h1);
          
      percent_done := 0;
          
      job_state := 'UNDEFINED';
           
      while (job_state != 'COMPLETED') and (job_state != 'STOPPED') 
      loop
          dbms_datapump.get_status(h1,
               dbms_datapump.ku$_status_job_error +
               dbms_datapump.ku$_status_job_status +
               dbms_datapump.ku$_status_wip,-1,job_state,sts);
                                   
          js := sts.job_status;

          if js.percent_done != percent_done then
            dbms_output.put_line('*** Job percent done = ' || to_char(js.percent_done));
            percent_done := js.percent_done;
          end if;


          if (bitand(sts.mask,dbms_datapump.ku$_status_wip) != 0) then
             le := sts.wip;
          else
             if (bitand(sts.mask,dbms_datapump.ku$_status_job_error) != 0) then
               le := sts.error;
             else
               le := null;
             end if;
           end if;
                            
          if le is not null then
            ind := le.FIRST;
            while ind is not null 
            loop
               dbms_output.put_line(le(ind).LogText);
               ind := le.NEXT(ind);
            end loop;
         end if;
            
      end loop;

      -- Indicate that the job finished and gracefully detach from it. 

      dbms_output.put_line('Job has completed');
      dbms_output.put_line('Final job state = ' || job_state);
      dbms_datapump.detach(h1);

  EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.format_error_backtrace);
    dbms_datapump.get_status(h1,
           dbms_datapump.ku$_status_job_error +
           dbms_datapump.ku$_status_job_status +
           dbms_datapump.ku$_status_wip,0,job_state,sts);
        
     le  := sts.error;
     ind := le.FIRST;
               
     if le is not null then
         while ind is not null 
         loop
            dbms_output.put_line(le(ind).LogText);
            ind := le.NEXT(ind);
         end loop; 
     end if;
         
     dbms_datapump.detach(h1);
  END;

EXCEPTION
  WHEN OTHERS THEN 
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.format_error_backtrace);
END;
/
